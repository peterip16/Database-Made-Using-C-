
Google logo Drive
Add to Drive
Project Part 2 & 34 items

db.cpp

db.h
PDF
p1list_2.pdf
PDF
p1list_3.pdf

#ifdef __unix__
#define _stricmp stricmp


#include <string.h>
#include <sys/stat.h>
#define _stat stat
#define _fileno fileno
#define _fstat fstat
#define stricmp strcasecmp
#else
#define stricmp _stricmp
#endif

#include <stdio.h>

/********************************************************************
db.h - This file contains all the structures, defines, and function
	prototype for the db.exe program.
*********************************************************************/

#define MAX_IDENT_LEN   16
#define MAX_NUM_COL			16
#define MAX_TOK_LEN			32
#define KEYWORD_OFFSET	10
#define STRING_BREAK		" (),<>="
#define NUMBER_BREAK		" ),"

/* Column descriptor sturcture = 20+4+4+4+4 = 36 bytes */
typedef struct cd_entry_def
{
	char		col_name[MAX_IDENT_LEN+4];
	int			col_id;                   /* Start from 0 */
	int			col_type;
	int			col_len;
	int 		not_null;
} cd_entry;

/* Table packed descriptor sturcture = 4+20+4+4+4 = 36 bytes
   Minimum of 1 column in a table - therefore minimum size of
	 1 valid tpd_entry is 36+36 = 72 bytes. */
typedef struct tpd_entry_def
{
	int				tpd_size;
	char			table_name[MAX_IDENT_LEN+4];
	int				num_columns;
	int				cd_offset;
	int       	tpd_flags;
} tpd_entry;

/* Table packed descriptor list = 4+4+4+36 = 48 bytes.  When no
   table is defined the tpd_list is 48 bytes.  When there is 
	 at least 1 table, then the tpd_entry (36 bytes) will be
	 overlapped by the first valid tpd_entry. */
typedef struct tpd_list_def
{
	int				list_size;
	int				num_tables;
	int				db_flags;
	tpd_entry		tpd_start;
}tpd_list;

/* This token_list definition is used for breaking the command
   string into separate tokens in function get_tokens().  For
	 each token, a new token_list will be allocated and linked 
	 together. */
typedef struct t_list
{
	char	tok_string[MAX_TOK_LEN];
	int		tok_class;
	int		tok_value;
	struct 	t_list *next;

}token_list;


typedef struct table_file_header_def
{
  int file_size;
  int record_size;
  int num_records;
  int record_offset;
  int file_header_flag;
  tpd_entry *tpd_ptr;

}table_file_header;


/* This enum defines the different classes of tokens for 
	 semantic processing. */
typedef enum t_class
{
	keyword = 1,	// 1
	identifier,		// 2
	symbol, 		// 3
	type_name,		// 4
	constant,		// 5
	function_name,	// 6
	terminator,		// 7
	error			// 8
  
} token_class;

/* This enum defines the different values associated with
   a single valid token.  Use for semantic processing. */
typedef enum t_value
{
	T_INT = 10,		// 10 - new type should be added above this line
	T_CHAR,		    // 11 
	K_CREATE, 		// 12
	K_TABLE,			// 13
	K_NOT,				// 14
	K_NULL,				// 15
	K_DROP,				// 16
	K_LIST,				// 17
	K_SCHEMA,			// 18
  	K_FOR,        // 19
	K_TO,				  // 20
	K_INSERT,     // 21
	K_INTO,       // 22
	K_VALUES,     // 23
	K_DELETE,     // 24
	K_FROM,       // 25
	K_WHERE,      // 26
	K_UPDATE,     // 27
	K_SET,        // 28
	K_SELECT,     // 29
	K_ORDER,      // 30
	K_BY,         // 31
	K_DESC,       // 32
	K_IS,         // 33
	K_AND,        // 34
	K_OR,         // 35 - new keyword should be added below this line
	K_BACKUP,	//36
	K_RESTORE,	//37
	K_ROLLFORWARD,	//38
	K_WITHOUT,	//39
	K_RF,		//40
	F_SUM,        // 41
	F_AVG,        // 42
	F_COUNT,      // 73 - new function name should be added below this line
	S_LEFT_PAREN = 70,  // 70
	S_RIGHT_PAREN,		  // 71
	S_COMMA,			      // 72
	S_STAR,             // 73
	S_EQUAL,            // 74
	S_LESS,             // 75
	S_GREATER,          // 76
	IDENT = 85,			    // 85
	INT_LITERAL = 90,	  // 90
    STRING_LITERAL,     // 91
	EOC = 95,			      // 95
	INVALID = 99		    // 99
} token_value;

/* This constants must be updated when add new keywords */
#define TOTAL_KEYWORDS_PLUS_TYPE_NAMES 34

/* New keyword must be added in the same position/order as the enum
   definition above, otherwise the lookup will be wrong */
char *keyword_table[] = 
{
  "int", "char", "create", "table", "not", "null", "drop", "list", "schema",
  "for", "to", "insert", "into", "values", "delete", "from", "where", 
  "update", "set", "select", "order", "by", "desc", "is", "and", "or",
  "backup","restore","rollforward","without","rf","sum", "avg", "count"
};

/* This enum defines a set of possible statements */
typedef enum s_statement
{
	INVALID_STATEMENT = -199,	// -199
	CREATE_TABLE = 100,				// 100
	DROP_TABLE,								// 101
	LIST_TABLE,								// 102
	LIST_SCHEMA,							// 103
    INSERT,                   // 104
    DELETE,                   // 105
    UPDATE,                   // 106
	SELECT,                   // 107
	BACKUP,                   // 108
	RESTORE,                  // 109
	ROLLFORWARD               //110
} semantic_statement;

/* This enum has a list of all the errors that should be detected
   by the program.  Can append to this if necessary. */
typedef enum error_return_codes
{
	INVALID_TABLE_NAME = -399,	// -399
	DUPLICATE_TABLE_NAME,				// -398
	TABLE_NOT_EXIST,						// -397
	INVALID_TABLE_DEFINITION,		// -396
	INVALID_COLUMN_NAME,				// -395
	DUPLICATE_COLUMN_NAME,			// -394
	COLUMN_NOT_EXIST,						// -393
	MAX_COLUMN_EXCEEDED,				// -392
	INVALID_TYPE_NAME,					// -391
	INVALID_COLUMN_DEFINITION,	// -390
	INVALID_COLUMN_LENGTH,			// -389
  	INVALID_REPORT_FILE_NAME,		// -388
  /* Must add all the possible errors from I/U/D + SELECT here */
	FILE_OPEN_ERROR = -299,			// -299
	DBFILE_CORRUPTION,					// -298
  	MEMORY_ERROR,							  // -297
  	INVALID_LITERAL_VALUE,   //-296
	MISSING_ARGUMENTS,          //-295
	MORE_ARGUMENTS_THAN_EXPECTED,//-294
	MISSING_RIGHT_PAREN_OR_COMMA,//-293
	MISSING_LEFT_PAREN,          //-292
	UNEXPECTED_COMMA,            //-291
	UNEXPECTED_TOKEN,            //-290
	STRING_LARGER_THAN_EXPECTED,  //-289
	MORE_COLUMNS_THAN_EXPECTED,  //-288
	INVALID_FUNCTION_PARAMETER, //-287
	BACKUP_FILE_ALREADY_EXIST,   //-286
	BACKUP_FILE_NOT_EXIST,       //-285
	LOG_FILE_NOT_EXIST,          //-284
	MISSING_BACKUP_LOG,
	DO_ROLLFOWARD,
	RF_START_MISSING,
	DOING_ROLLFORWARD,
	INVALID_TIMESTAMP
} return_codes;

typedef enum db_flags_codes
{
	ROLLFORWARD_PENDING = 200
} flags_codes;
/* Set of function prototypes */
int get_token(char *command, token_list **tok_list);
void add_to_list(token_list **tok_list, char *tmp, int t_class, int t_value);
int do_semantic(token_list *tok_list);
int sem_create_table(token_list *t_list);
int sem_drop_table(token_list *t_list);
int sem_list_tables();
int sem_list_schema(token_list *t_list);
int sem_insert(token_list *t_list);
int sem_select(token_list *t_list);
int sem_delete(token_list *t_list);
int sem_update(token_list *t_list);
int sem_backup(token_list *t_list);
int sem_restore(token_list *t_list);
int sem_rollforward(token_list *t_list);


typedef struct select_statement_codition_def
{
  /*
   * Value:
   *  1 IS NULL
   *  2 IS NOT NULL
   * 	S_LESS
   *  S_GREATER
   *  S_EQUAL
   */
  int type;

  char* str_value;
  int int_value;

  int value_type;
  token_list* value_tok;

  char col_name[MAX_IDENT_LEN];
  token_list* col_name_tok;

}select_statement_codition;



typedef struct select_statement_order_def
{
  char col_name[MAX_IDENT_LEN];
  token_list* col_name_tok;

  /*
   * false means 1,2,3 ...
   * true means n,n-1, ... 3, 2, 1
   */
  bool desc;

}select_statement_order;



//This is used to store all related to the select statement
typedef struct select_statement_data_def
{
  //Column identifiers
  char col_ident[MAX_NUM_COL][MAX_IDENT_LEN];
  token_list* col_ident_tok[MAX_NUM_COL];
  int num_col;
  bool istart;
  char table_name[MAX_IDENT_LEN];
  token_list* table_name_tok;

  //If first_condition!=NULL => first condition must be evaluated
  select_statement_codition* first_condition;
  //If second_condition!=NULL => first_condition logical_operator second_condition must be evaluated
  select_statement_codition* second_condition;

  /*
   * Values:
   *  K_AND = false
   *  K_OR = true
   */
  int logical_operator;

  select_statement_order* order;

  bool has_aggregate;
  int aggregate_value;
  t_list* aggregate_tok;

  bool all_cols;

  unsigned char * workspace_table_data[100];

  /*
   * record_status[i] == -2 means there is nothing
   * record_status[i] == -1 means there is a record but it is not ordered
   * record_status >= 0 means the order to print
   */
  int record_status[100];

}select_statement_data;


int __sem_select(token_list *t_list);
int __sem_select_parse(token_list *t_list, select_statement_data *select_data);
int __sem_select_semantic(select_statement_data *select_data);
int __sem_select_where(token_list *&cur, select_statement_data *select_data);
int __sem_select_order(token_list *&cur, select_statement_data *select_data);

int __sem_select_apply_conditions(select_statement_data* select_data, unsigned char *workspace_table_data[],int record_status[100]);
int __order_by(select_statement_data* select_data, unsigned char *workspace_table_data[],int record_status[100]);


bool evaluate_condition(select_statement_codition* condition, char* str_value);

char* get_col_value(unsigned char* current_row, char* col_name);

bool hasNextColum(token_list *&t_list,char* str_dentifier);
bool hasNextCondition(token_list *&t_list,char* str_dentifier);

int is_condition(token_list *&t_list,select_statement_codition* condition);
bool is_aggregate(token_list*& t_list);

bool colum_exist(const char * column_name);
int get_column_type(const char * column_name);
int get_column_len(const char * column_name);

//This a helper function for debugging
void print_select_data(select_statement_data* select_data);
void print_select_data_condition(select_statement_codition* condition);

/*
	Keep a global list of tpd - in real life, this will be stored
	in shared memory.  Build a set of functions/methods around this.
*/
tpd_list	*g_tpd_list;
int initialize_tpd_list();
int add_tpd_to_list(tpd_entry *tpd);
int drop_tpd_from_list(char *tabname);
tpd_entry* get_tpd_from_list(char *tabname);

int create_table_file(const char * table_name, tpd_entry *new_entry);


/*
 Keep the current table data in memory
*/
unsigned char ** current_table_data = NULL;
table_file_header * tab_file_header;

//Utility function
int load_table(token_list *cur);

void display_table();

void delete_table_data();

int file_exist (char *filename);

time_t getTime(char *szYYYYMMDDHHMMSS);

size_t deleteLine( char* buffer, size_t size, const char* line );
db.h
2 of 4 items
db.cppdb.hp1list_2.pdfp1list_3.pdfDisplaying db.cpp.